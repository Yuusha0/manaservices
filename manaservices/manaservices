#!/usr/bin/env python3
#  manaservices.py
#
#  Copyright 2020 Yuusha
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#

import manatools.ui.common as common
import manatools.ui.basedialog as basedialog
import manatools.services as mnservices
import yui
# import gettext
from os import getuid

######################################################################
##
##  Manaservices
##
######################################################################

# DEBUG INFO : You have to comment python-manatools/manatools/services.py from line 71 to 87 for testing this module.


class MsDialog(basedialog.BaseDialog):
    def __init__(self):
        if getuid() == 0:
            space = "System space"
        else:
            space = "User space"
        self._application_name = "Manaservices - ManaTools service manager"
        basedialog.BaseDialog.__init__(self, "Manatools service manager - {}".format(space), "", basedialog.DialogType.POPUP, 80, 10)

    def _serviceInfo(self, service):
        if service:
            yui.YUI.ui().blockEvents()
            descr = self._list_services[service]['description'] if 'description' in self._list_services[service].keys() else "---"
            self._infoPanel.setValue(descr)
            yui.YUI.ui().unblockEvents()

    def _fillServiceTable(self):
        ''' fill service table with service info
        param
        tbl yui table
        '''
        self._serviceTable.startMultipleChanges()
        self._serviceTable.deleteAllItems()

        itemCollection = yui.YItemCollection()
        for service in sorted(self._list_services):
            serv = self._list_services[service]
            started = serv['active_state'] if 'active_state' in serv.keys() else False
            item = yui.YCBTableItem(service, started if started else "Not active")
            enabled = serv['enabled'] if 'enabled' in serv.keys() else False
            if enabled:
                item.check(service in self._list_services)
            item.setLabel(service)
            item.this.own(False)
            itemCollection.push_back(item)

        self._serviceTable.addItems(itemCollection)
        self._serviceTable.doneMultipleChanges()

    def UIlayout(self, layout):
        '''
        layout to setup UI for Manaservices
        '''
        # optFactory = yui.YUI.optionalWidgetFactory()
        dialog = self.factory.createVBox(layout)

        # Line for heading
        self.factory.createLabel((dialog), "A tool to manage your services", True, False)

        vbox = self.factory.createVBox(layout)
        frame = self.factory.createFrame(vbox, "")
        frmVbox = self.factory.createVBox(frame)
        hbox = self.factory.createHBox(frmVbox)

        yTableHeader = yui.YTableHeader()
        yTableHeader.addColumn("Service")
        yTableHeader.addColumn("Status", yui.YAlignCenter)
        yTableHeader.addColumn("On boot")

        self._serviceTable = self.mgaFactory.createCBTable(hbox, yTableHeader, yui.YCBTableCheckBoxOnLastColumn)

        myserv = mnservices.Services()
        self._list_services = myserv.service_info
        self._fillServiceTable()

        self._serviceTable.setImmediateMode(True)
        self._serviceTable.setWeight(0, 50)

        # Info panel
        frame = self.factory.createFrame(hbox, "Information")
        frame.setWeight(0, 30)
        frmVbox = self.factory.createVBox(frame)
        self._infoPanel = self.factory.createRichText(frmVbox, "--------------")
        self._infoPanel.setAutoScrollDown()

        # Service start button
        hbox = self.factory.createHBox(frmVbox)
        self._startButton = self.factory.createPushButton(hbox, "&Start")

        # Service stop button
        self._stopButton = self.factory.createPushButton(hbox, "&Stop")

        # Dialog buttons
        self.factory.createVSpacing(vbox, 1.0)
        # buttons on the last line
        align = self.factory.createRight(layout)
        hbox = self.factory.createHBox(align)
        aboutButton = self.factory.createPushButton(hbox, "&About")
        self.eventManager.addWidgetEvent(aboutButton, self.onAbout)
        align = self.factory.createRight(hbox)
        hbox = self.factory.createHBox(align)
        refreshButton = self.factory.createPushButton(hbox, "&Refresh")
        quitButton = self.factory.createPushButton(hbox, "&Quit")
        self.eventManager.addWidgetEvent(quitButton, self.onQuit)

        # First item selection
        item = self._serviceTable.selectedItem()
        if item:
            self._serviceInfo(item.label())
            self._stopButton.setEnabled(True)
            self._startButton.setEnabled(True)

        # Changing line event
        self.eventManager.addWidgetEvent(self._serviceTable, self.onSelectedEvent)

        # Let's test a cancel event
        self.eventManager.addCancelEvent(self.onCancelEvent)

        # End Dialof layout

    def onCancelEvent(self):
        self.ExitLoop()
        print("Got a cancel event")

    def onQuit(self):
        print("Quit button pressed")
        self.ExitLoop()

    def onAbout(self):
        ok = common.AboutDialog({
            'name': self._application_name,
            'dialog_mode': common.AboutDialogMode.TABBED,
            'version': "0.1.0",
            'credits': "Credits 2020 Yuusha",
            'license': 'GPLv3',
            'authors': 'Yuusha &lt;cyril.levet0780@orange.fr&gt;',
            'description': "manaservices is a tool to manage daemons",
        })

    def onSelectedEvent(self):
        event = self.dialog.waitForEvent()
        wEvent = yui.toYWidgetEvent(event)
        item = self._serviceTable.selectedItem()
        if item :
            self._serviceInfo(item.label())
            self._stopButton.setEnabled(True)
            self._startButton.setEnabled(True)
        if wEvent.reason() == yui.YEvent.ValueChanged:
            item = self._serviceTable.changedItem()
            if item:
                yui.YUI.app().busyCursor()
                try:
                    self._serviceTable.set_service
                except:
                    print("Description not found")

if __name__ == '__main__':
    d = MsDialog()
    d.run()
